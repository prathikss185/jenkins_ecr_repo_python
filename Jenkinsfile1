pipeline {
    agent any

    environment {
        // Set your ECR registry URL
        ECR_REGISTRY = "585008051018.dkr.ecr.us-east-1.amazonaws.com/jackin/jackinon"
        // Set the name of your Docker image
        dockerImageTag = "${env.BUILD_NUMBER}"
        // Set container port to expose
        CONTAINER_PORT = "8080"  // Update this with the port your application uses
        // Set host port to map
        HOST_PORT = "8081"  // Update this with the port you want to use on the host
    }

    stages {
        stage('Git Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/prathikss185/jenkins_ecr_repo_python.git']])
            }
        }

        stage('Building Image') {
            steps {
                script {
                    dockerImage = docker.build("${ECR_REGISTRY}:${dockerImageTag}")
                }
            }
        }

        stage('Pushing to ECR') {
            steps {
                script {
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}'
                    sh "docker push ${ECR_REGISTRY}:${dockerImageTag}"
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Stop and remove any existing container with the same name
                    sh "docker stop my_app_container || true"
                    sh "docker rm my_app_container || true"
                    
                    // Pull the image from ECR
                    sh "docker pull ${ECR_REGISTRY}:${dockerImageTag}"
                    
                    // Run the Docker container
                    sh "docker run -d -p ${HOST_PORT}:${CONTAINER_PORT} --name my_app_container ${ECR_REGISTRY}:${dockerImageTag}"
                    
                    // Print container details for verification
                    sh "docker ps"
                }
            }
        }
    }

    post {
        always {
            // Clean up any stopped containers to avoid clutter
            sh "docker container prune -f"
        }
    }
}
